// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.28.3
// source: leave.proto

package leavev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LeaveType int32

const (
	LeaveType_LEAVE_TYPE_UNSPECIFIED LeaveType = 0
	LeaveType_LEAVE_TYPE_ANNUAL      LeaveType = 1
	LeaveType_LEAVE_TYPE_SICK        LeaveType = 2
	LeaveType_LEAVE_TYPE_MATERNITY   LeaveType = 3
	LeaveType_LEAVE_TYPE_PATERNITY   LeaveType = 4
	LeaveType_LEAVE_TYPE_EMERGENCY   LeaveType = 5
	LeaveType_LEAVE_TYPE_PERSONAL    LeaveType = 6
)

// Enum value maps for LeaveType.
var (
	LeaveType_name = map[int32]string{
		0: "LEAVE_TYPE_UNSPECIFIED",
		1: "LEAVE_TYPE_ANNUAL",
		2: "LEAVE_TYPE_SICK",
		3: "LEAVE_TYPE_MATERNITY",
		4: "LEAVE_TYPE_PATERNITY",
		5: "LEAVE_TYPE_EMERGENCY",
		6: "LEAVE_TYPE_PERSONAL",
	}
	LeaveType_value = map[string]int32{
		"LEAVE_TYPE_UNSPECIFIED": 0,
		"LEAVE_TYPE_ANNUAL":      1,
		"LEAVE_TYPE_SICK":        2,
		"LEAVE_TYPE_MATERNITY":   3,
		"LEAVE_TYPE_PATERNITY":   4,
		"LEAVE_TYPE_EMERGENCY":   5,
		"LEAVE_TYPE_PERSONAL":    6,
	}
)

func (x LeaveType) Enum() *LeaveType {
	p := new(LeaveType)
	*p = x
	return p
}

func (x LeaveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaveType) Descriptor() protoreflect.EnumDescriptor {
	return file_leave_proto_enumTypes[0].Descriptor()
}

func (LeaveType) Type() protoreflect.EnumType {
	return &file_leave_proto_enumTypes[0]
}

func (x LeaveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaveType.Descriptor instead.
func (LeaveType) EnumDescriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{0}
}

type LeaveStatus int32

const (
	LeaveStatus_LEAVE_STATUS_UNSPECIFIED LeaveStatus = 0
	LeaveStatus_LEAVE_STATUS_PENDING     LeaveStatus = 1
	LeaveStatus_LEAVE_STATUS_APPROVED    LeaveStatus = 2
	LeaveStatus_LEAVE_STATUS_REJECTED    LeaveStatus = 3
	LeaveStatus_LEAVE_STATUS_CANCELLED   LeaveStatus = 4
)

// Enum value maps for LeaveStatus.
var (
	LeaveStatus_name = map[int32]string{
		0: "LEAVE_STATUS_UNSPECIFIED",
		1: "LEAVE_STATUS_PENDING",
		2: "LEAVE_STATUS_APPROVED",
		3: "LEAVE_STATUS_REJECTED",
		4: "LEAVE_STATUS_CANCELLED",
	}
	LeaveStatus_value = map[string]int32{
		"LEAVE_STATUS_UNSPECIFIED": 0,
		"LEAVE_STATUS_PENDING":     1,
		"LEAVE_STATUS_APPROVED":    2,
		"LEAVE_STATUS_REJECTED":    3,
		"LEAVE_STATUS_CANCELLED":   4,
	}
)

func (x LeaveStatus) Enum() *LeaveStatus {
	p := new(LeaveStatus)
	*p = x
	return p
}

func (x LeaveStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaveStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_leave_proto_enumTypes[1].Descriptor()
}

func (LeaveStatus) Type() protoreflect.EnumType {
	return &file_leave_proto_enumTypes[1]
}

func (x LeaveStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaveStatus.Descriptor instead.
func (LeaveStatus) EnumDescriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{1}
}

type LeaveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EmployeeId    string                 `protobuf:"bytes,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	EmployeeName  string                 `protobuf:"bytes,3,opt,name=employee_name,json=employeeName,proto3" json:"employee_name,omitempty"`
	LeaveType     LeaveType              `protobuf:"varint,4,opt,name=leave_type,json=leaveType,proto3,enum=hr.leave.v1.LeaveType" json:"leave_type,omitempty"`
	StartDate     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	DaysRequested int32                  `protobuf:"varint,7,opt,name=days_requested,json=daysRequested,proto3" json:"days_requested,omitempty"`
	Reason        string                 `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	LeaveStatus   LeaveStatus            `protobuf:"varint,9,opt,name=leave_status,json=leaveStatus,proto3,enum=hr.leave.v1.LeaveStatus" json:"leave_status,omitempty"`
	ApproverId    string                 `protobuf:"bytes,10,opt,name=approver_id,json=approverId,proto3" json:"approver_id,omitempty"`
	ApproverName  string                 `protobuf:"bytes,11,opt,name=approver_name,json=approverName,proto3" json:"approver_name,omitempty"`
	Comments      string                 `protobuf:"bytes,12,opt,name=comments,proto3" json:"comments,omitempty"`
	ApprovedAt    *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveRequest) Reset() {
	*x = LeaveRequest{}
	mi := &file_leave_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRequest) ProtoMessage() {}

func (x *LeaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRequest.ProtoReflect.Descriptor instead.
func (*LeaveRequest) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{0}
}

func (x *LeaveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LeaveRequest) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *LeaveRequest) GetEmployeeName() string {
	if x != nil {
		return x.EmployeeName
	}
	return ""
}

func (x *LeaveRequest) GetLeaveType() LeaveType {
	if x != nil {
		return x.LeaveType
	}
	return LeaveType_LEAVE_TYPE_UNSPECIFIED
}

func (x *LeaveRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *LeaveRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *LeaveRequest) GetDaysRequested() int32 {
	if x != nil {
		return x.DaysRequested
	}
	return 0
}

func (x *LeaveRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *LeaveRequest) GetLeaveStatus() LeaveStatus {
	if x != nil {
		return x.LeaveStatus
	}
	return LeaveStatus_LEAVE_STATUS_UNSPECIFIED
}

func (x *LeaveRequest) GetApproverId() string {
	if x != nil {
		return x.ApproverId
	}
	return ""
}

func (x *LeaveRequest) GetApproverName() string {
	if x != nil {
		return x.ApproverName
	}
	return ""
}

func (x *LeaveRequest) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *LeaveRequest) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *LeaveRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LeaveRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type LeaveBalance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmployeeId    string                 `protobuf:"bytes,1,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	LeaveType     LeaveType              `protobuf:"varint,2,opt,name=leave_type,json=leaveType,proto3,enum=hr.leave.v1.LeaveType" json:"leave_type,omitempty"`
	TotalDays     int32                  `protobuf:"varint,3,opt,name=total_days,json=totalDays,proto3" json:"total_days,omitempty"`
	UsedDays      int32                  `protobuf:"varint,4,opt,name=used_days,json=usedDays,proto3" json:"used_days,omitempty"`
	RemainingDays int32                  `protobuf:"varint,5,opt,name=remaining_days,json=remainingDays,proto3" json:"remaining_days,omitempty"`
	Year          int32                  `protobuf:"varint,6,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveBalance) Reset() {
	*x = LeaveBalance{}
	mi := &file_leave_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveBalance) ProtoMessage() {}

func (x *LeaveBalance) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveBalance.ProtoReflect.Descriptor instead.
func (*LeaveBalance) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{1}
}

func (x *LeaveBalance) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *LeaveBalance) GetLeaveType() LeaveType {
	if x != nil {
		return x.LeaveType
	}
	return LeaveType_LEAVE_TYPE_UNSPECIFIED
}

func (x *LeaveBalance) GetTotalDays() int32 {
	if x != nil {
		return x.TotalDays
	}
	return 0
}

func (x *LeaveBalance) GetUsedDays() int32 {
	if x != nil {
		return x.UsedDays
	}
	return 0
}

func (x *LeaveBalance) GetRemainingDays() int32 {
	if x != nil {
		return x.RemainingDays
	}
	return 0
}

func (x *LeaveBalance) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type CreateLeaveRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmployeeId    string                 `protobuf:"bytes,1,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	LeaveType     LeaveType              `protobuf:"varint,2,opt,name=leave_type,json=leaveType,proto3,enum=hr.leave.v1.LeaveType" json:"leave_type,omitempty"`
	StartDate     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Reason        string                 `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLeaveRequestRequest) Reset() {
	*x = CreateLeaveRequestRequest{}
	mi := &file_leave_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLeaveRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeaveRequestRequest) ProtoMessage() {}

func (x *CreateLeaveRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeaveRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateLeaveRequestRequest) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{2}
}

func (x *CreateLeaveRequestRequest) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *CreateLeaveRequestRequest) GetLeaveType() LeaveType {
	if x != nil {
		return x.LeaveType
	}
	return LeaveType_LEAVE_TYPE_UNSPECIFIED
}

func (x *CreateLeaveRequestRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CreateLeaveRequestRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CreateLeaveRequestRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type CreateLeaveRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeaveRequest  *LeaveRequest          `protobuf:"bytes,1,opt,name=leave_request,json=leaveRequest,proto3" json:"leave_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLeaveRequestResponse) Reset() {
	*x = CreateLeaveRequestResponse{}
	mi := &file_leave_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLeaveRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeaveRequestResponse) ProtoMessage() {}

func (x *CreateLeaveRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeaveRequestResponse.ProtoReflect.Descriptor instead.
func (*CreateLeaveRequestResponse) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{3}
}

func (x *CreateLeaveRequestResponse) GetLeaveRequest() *LeaveRequest {
	if x != nil {
		return x.LeaveRequest
	}
	return nil
}

type GetLeaveRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaveRequestRequest) Reset() {
	*x = GetLeaveRequestRequest{}
	mi := &file_leave_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaveRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaveRequestRequest) ProtoMessage() {}

func (x *GetLeaveRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaveRequestRequest.ProtoReflect.Descriptor instead.
func (*GetLeaveRequestRequest) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{4}
}

func (x *GetLeaveRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetLeaveRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeaveRequest  *LeaveRequest          `protobuf:"bytes,1,opt,name=leave_request,json=leaveRequest,proto3" json:"leave_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaveRequestResponse) Reset() {
	*x = GetLeaveRequestResponse{}
	mi := &file_leave_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaveRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaveRequestResponse) ProtoMessage() {}

func (x *GetLeaveRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaveRequestResponse.ProtoReflect.Descriptor instead.
func (*GetLeaveRequestResponse) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{5}
}

func (x *GetLeaveRequestResponse) GetLeaveRequest() *LeaveRequest {
	if x != nil {
		return x.LeaveRequest
	}
	return nil
}

type UpdateLeaveRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LeaveType     LeaveType              `protobuf:"varint,2,opt,name=leave_type,json=leaveType,proto3,enum=hr.leave.v1.LeaveType" json:"leave_type,omitempty"`
	StartDate     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Reason        string                 `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLeaveRequestRequest) Reset() {
	*x = UpdateLeaveRequestRequest{}
	mi := &file_leave_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLeaveRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeaveRequestRequest) ProtoMessage() {}

func (x *UpdateLeaveRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeaveRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdateLeaveRequestRequest) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateLeaveRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateLeaveRequestRequest) GetLeaveType() LeaveType {
	if x != nil {
		return x.LeaveType
	}
	return LeaveType_LEAVE_TYPE_UNSPECIFIED
}

func (x *UpdateLeaveRequestRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *UpdateLeaveRequestRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *UpdateLeaveRequestRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateLeaveRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeaveRequest  *LeaveRequest          `protobuf:"bytes,1,opt,name=leave_request,json=leaveRequest,proto3" json:"leave_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLeaveRequestResponse) Reset() {
	*x = UpdateLeaveRequestResponse{}
	mi := &file_leave_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLeaveRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeaveRequestResponse) ProtoMessage() {}

func (x *UpdateLeaveRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeaveRequestResponse.ProtoReflect.Descriptor instead.
func (*UpdateLeaveRequestResponse) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateLeaveRequestResponse) GetLeaveRequest() *LeaveRequest {
	if x != nil {
		return x.LeaveRequest
	}
	return nil
}

type DeleteLeaveRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLeaveRequestRequest) Reset() {
	*x = DeleteLeaveRequestRequest{}
	mi := &file_leave_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLeaveRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeaveRequestRequest) ProtoMessage() {}

func (x *DeleteLeaveRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeaveRequestRequest.ProtoReflect.Descriptor instead.
func (*DeleteLeaveRequestRequest) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteLeaveRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListLeaveRequestsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	EmployeeId    string                 `protobuf:"bytes,3,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	Status        LeaveStatus            `protobuf:"varint,4,opt,name=status,proto3,enum=hr.leave.v1.LeaveStatus" json:"status,omitempty"`
	LeaveType     LeaveType              `protobuf:"varint,5,opt,name=leave_type,json=leaveType,proto3,enum=hr.leave.v1.LeaveType" json:"leave_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLeaveRequestsRequest) Reset() {
	*x = ListLeaveRequestsRequest{}
	mi := &file_leave_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLeaveRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeaveRequestsRequest) ProtoMessage() {}

func (x *ListLeaveRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeaveRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListLeaveRequestsRequest) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{9}
}

func (x *ListLeaveRequestsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListLeaveRequestsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLeaveRequestsRequest) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *ListLeaveRequestsRequest) GetStatus() LeaveStatus {
	if x != nil {
		return x.Status
	}
	return LeaveStatus_LEAVE_STATUS_UNSPECIFIED
}

func (x *ListLeaveRequestsRequest) GetLeaveType() LeaveType {
	if x != nil {
		return x.LeaveType
	}
	return LeaveType_LEAVE_TYPE_UNSPECIFIED
}

type ListLeaveRequestsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeaveRequests []*LeaveRequest        `protobuf:"bytes,1,rep,name=leave_requests,json=leaveRequests,proto3" json:"leave_requests,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLeaveRequestsResponse) Reset() {
	*x = ListLeaveRequestsResponse{}
	mi := &file_leave_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLeaveRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeaveRequestsResponse) ProtoMessage() {}

func (x *ListLeaveRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeaveRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListLeaveRequestsResponse) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{10}
}

func (x *ListLeaveRequestsResponse) GetLeaveRequests() []*LeaveRequest {
	if x != nil {
		return x.LeaveRequests
	}
	return nil
}

func (x *ListLeaveRequestsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListLeaveRequestsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListLeaveRequestsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ApproveLeaveRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApproverId    string                 `protobuf:"bytes,2,opt,name=approver_id,json=approverId,proto3" json:"approver_id,omitempty"`
	Comments      string                 `protobuf:"bytes,3,opt,name=comments,proto3" json:"comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveLeaveRequestRequest) Reset() {
	*x = ApproveLeaveRequestRequest{}
	mi := &file_leave_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveLeaveRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveLeaveRequestRequest) ProtoMessage() {}

func (x *ApproveLeaveRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveLeaveRequestRequest.ProtoReflect.Descriptor instead.
func (*ApproveLeaveRequestRequest) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{11}
}

func (x *ApproveLeaveRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApproveLeaveRequestRequest) GetApproverId() string {
	if x != nil {
		return x.ApproverId
	}
	return ""
}

func (x *ApproveLeaveRequestRequest) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type ApproveLeaveRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeaveRequest  *LeaveRequest          `protobuf:"bytes,1,opt,name=leave_request,json=leaveRequest,proto3" json:"leave_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveLeaveRequestResponse) Reset() {
	*x = ApproveLeaveRequestResponse{}
	mi := &file_leave_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveLeaveRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveLeaveRequestResponse) ProtoMessage() {}

func (x *ApproveLeaveRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveLeaveRequestResponse.ProtoReflect.Descriptor instead.
func (*ApproveLeaveRequestResponse) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{12}
}

func (x *ApproveLeaveRequestResponse) GetLeaveRequest() *LeaveRequest {
	if x != nil {
		return x.LeaveRequest
	}
	return nil
}

type RejectLeaveRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApproverId    string                 `protobuf:"bytes,2,opt,name=approver_id,json=approverId,proto3" json:"approver_id,omitempty"`
	Comments      string                 `protobuf:"bytes,3,opt,name=comments,proto3" json:"comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectLeaveRequestRequest) Reset() {
	*x = RejectLeaveRequestRequest{}
	mi := &file_leave_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectLeaveRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectLeaveRequestRequest) ProtoMessage() {}

func (x *RejectLeaveRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectLeaveRequestRequest.ProtoReflect.Descriptor instead.
func (*RejectLeaveRequestRequest) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{13}
}

func (x *RejectLeaveRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RejectLeaveRequestRequest) GetApproverId() string {
	if x != nil {
		return x.ApproverId
	}
	return ""
}

func (x *RejectLeaveRequestRequest) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type RejectLeaveRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeaveRequest  *LeaveRequest          `protobuf:"bytes,1,opt,name=leave_request,json=leaveRequest,proto3" json:"leave_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectLeaveRequestResponse) Reset() {
	*x = RejectLeaveRequestResponse{}
	mi := &file_leave_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectLeaveRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectLeaveRequestResponse) ProtoMessage() {}

func (x *RejectLeaveRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectLeaveRequestResponse.ProtoReflect.Descriptor instead.
func (*RejectLeaveRequestResponse) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{14}
}

func (x *RejectLeaveRequestResponse) GetLeaveRequest() *LeaveRequest {
	if x != nil {
		return x.LeaveRequest
	}
	return nil
}

type GetEmployeeLeaveBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmployeeId    string                 `protobuf:"bytes,1,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	Year          int32                  `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEmployeeLeaveBalanceRequest) Reset() {
	*x = GetEmployeeLeaveBalanceRequest{}
	mi := &file_leave_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeeLeaveBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeeLeaveBalanceRequest) ProtoMessage() {}

func (x *GetEmployeeLeaveBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeeLeaveBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeeLeaveBalanceRequest) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{15}
}

func (x *GetEmployeeLeaveBalanceRequest) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *GetEmployeeLeaveBalanceRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type GetEmployeeLeaveBalanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeaveBalances []*LeaveBalance        `protobuf:"bytes,1,rep,name=leave_balances,json=leaveBalances,proto3" json:"leave_balances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEmployeeLeaveBalanceResponse) Reset() {
	*x = GetEmployeeLeaveBalanceResponse{}
	mi := &file_leave_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeeLeaveBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeeLeaveBalanceResponse) ProtoMessage() {}

func (x *GetEmployeeLeaveBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leave_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeeLeaveBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetEmployeeLeaveBalanceResponse) Descriptor() ([]byte, []int) {
	return file_leave_proto_rawDescGZIP(), []int{16}
}

func (x *GetEmployeeLeaveBalanceResponse) GetLeaveBalances() []*LeaveBalance {
	if x != nil {
		return x.LeaveBalances
	}
	return nil
}

var File_leave_proto protoreflect.FileDescriptor

var file_leave_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68,
	0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x05, 0x0a, 0x0c, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x0c, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68,
	0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x59, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xec, 0x01, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x72,
	0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaf,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x69, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x1b, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x19, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x1a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x72, 0x2e, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x55, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x63, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2a, 0xba,
	0x01, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x41, 0x56,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49,
	0x43, 0x4b, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x54,
	0x45, 0x52, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x41, 0x56,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59,
	0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x06, 0x2a, 0x97, 0x01, 0x0a, 0x0b,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x41,
	0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x45, 0x41,
	0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0xbb, 0x06, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x68, 0x72, 0x2e, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x68, 0x72, 0x2e,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x25, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68,
	0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x68, 0x72,
	0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x72, 0x2e,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x68, 0x72, 0x2e,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x72, 0x2e, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x22, 0x5a, 0x20, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x3b,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_leave_proto_rawDescOnce sync.Once
	file_leave_proto_rawDescData = file_leave_proto_rawDesc
)

func file_leave_proto_rawDescGZIP() []byte {
	file_leave_proto_rawDescOnce.Do(func() {
		file_leave_proto_rawDescData = protoimpl.X.CompressGZIP(file_leave_proto_rawDescData)
	})
	return file_leave_proto_rawDescData
}

var file_leave_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_leave_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_leave_proto_goTypes = []any{
	(LeaveType)(0),                          // 0: hr.leave.v1.LeaveType
	(LeaveStatus)(0),                        // 1: hr.leave.v1.LeaveStatus
	(*LeaveRequest)(nil),                    // 2: hr.leave.v1.LeaveRequest
	(*LeaveBalance)(nil),                    // 3: hr.leave.v1.LeaveBalance
	(*CreateLeaveRequestRequest)(nil),       // 4: hr.leave.v1.CreateLeaveRequestRequest
	(*CreateLeaveRequestResponse)(nil),      // 5: hr.leave.v1.CreateLeaveRequestResponse
	(*GetLeaveRequestRequest)(nil),          // 6: hr.leave.v1.GetLeaveRequestRequest
	(*GetLeaveRequestResponse)(nil),         // 7: hr.leave.v1.GetLeaveRequestResponse
	(*UpdateLeaveRequestRequest)(nil),       // 8: hr.leave.v1.UpdateLeaveRequestRequest
	(*UpdateLeaveRequestResponse)(nil),      // 9: hr.leave.v1.UpdateLeaveRequestResponse
	(*DeleteLeaveRequestRequest)(nil),       // 10: hr.leave.v1.DeleteLeaveRequestRequest
	(*ListLeaveRequestsRequest)(nil),        // 11: hr.leave.v1.ListLeaveRequestsRequest
	(*ListLeaveRequestsResponse)(nil),       // 12: hr.leave.v1.ListLeaveRequestsResponse
	(*ApproveLeaveRequestRequest)(nil),      // 13: hr.leave.v1.ApproveLeaveRequestRequest
	(*ApproveLeaveRequestResponse)(nil),     // 14: hr.leave.v1.ApproveLeaveRequestResponse
	(*RejectLeaveRequestRequest)(nil),       // 15: hr.leave.v1.RejectLeaveRequestRequest
	(*RejectLeaveRequestResponse)(nil),      // 16: hr.leave.v1.RejectLeaveRequestResponse
	(*GetEmployeeLeaveBalanceRequest)(nil),  // 17: hr.leave.v1.GetEmployeeLeaveBalanceRequest
	(*GetEmployeeLeaveBalanceResponse)(nil), // 18: hr.leave.v1.GetEmployeeLeaveBalanceResponse
	(*timestamppb.Timestamp)(nil),           // 19: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                   // 20: google.protobuf.Empty
}
var file_leave_proto_depIdxs = []int32{
	0,  // 0: hr.leave.v1.LeaveRequest.leave_type:type_name -> hr.leave.v1.LeaveType
	19, // 1: hr.leave.v1.LeaveRequest.start_date:type_name -> google.protobuf.Timestamp
	19, // 2: hr.leave.v1.LeaveRequest.end_date:type_name -> google.protobuf.Timestamp
	1,  // 3: hr.leave.v1.LeaveRequest.leave_status:type_name -> hr.leave.v1.LeaveStatus
	19, // 4: hr.leave.v1.LeaveRequest.approved_at:type_name -> google.protobuf.Timestamp
	19, // 5: hr.leave.v1.LeaveRequest.created_at:type_name -> google.protobuf.Timestamp
	19, // 6: hr.leave.v1.LeaveRequest.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 7: hr.leave.v1.LeaveBalance.leave_type:type_name -> hr.leave.v1.LeaveType
	0,  // 8: hr.leave.v1.CreateLeaveRequestRequest.leave_type:type_name -> hr.leave.v1.LeaveType
	19, // 9: hr.leave.v1.CreateLeaveRequestRequest.start_date:type_name -> google.protobuf.Timestamp
	19, // 10: hr.leave.v1.CreateLeaveRequestRequest.end_date:type_name -> google.protobuf.Timestamp
	2,  // 11: hr.leave.v1.CreateLeaveRequestResponse.leave_request:type_name -> hr.leave.v1.LeaveRequest
	2,  // 12: hr.leave.v1.GetLeaveRequestResponse.leave_request:type_name -> hr.leave.v1.LeaveRequest
	0,  // 13: hr.leave.v1.UpdateLeaveRequestRequest.leave_type:type_name -> hr.leave.v1.LeaveType
	19, // 14: hr.leave.v1.UpdateLeaveRequestRequest.start_date:type_name -> google.protobuf.Timestamp
	19, // 15: hr.leave.v1.UpdateLeaveRequestRequest.end_date:type_name -> google.protobuf.Timestamp
	2,  // 16: hr.leave.v1.UpdateLeaveRequestResponse.leave_request:type_name -> hr.leave.v1.LeaveRequest
	1,  // 17: hr.leave.v1.ListLeaveRequestsRequest.status:type_name -> hr.leave.v1.LeaveStatus
	0,  // 18: hr.leave.v1.ListLeaveRequestsRequest.leave_type:type_name -> hr.leave.v1.LeaveType
	2,  // 19: hr.leave.v1.ListLeaveRequestsResponse.leave_requests:type_name -> hr.leave.v1.LeaveRequest
	2,  // 20: hr.leave.v1.ApproveLeaveRequestResponse.leave_request:type_name -> hr.leave.v1.LeaveRequest
	2,  // 21: hr.leave.v1.RejectLeaveRequestResponse.leave_request:type_name -> hr.leave.v1.LeaveRequest
	3,  // 22: hr.leave.v1.GetEmployeeLeaveBalanceResponse.leave_balances:type_name -> hr.leave.v1.LeaveBalance
	6,  // 23: hr.leave.v1.LeaveService.GetLeaveRequest:input_type -> hr.leave.v1.GetLeaveRequestRequest
	10, // 24: hr.leave.v1.LeaveService.DeleteLeaveRequest:input_type -> hr.leave.v1.DeleteLeaveRequestRequest
	11, // 25: hr.leave.v1.LeaveService.ListLeaveRequests:input_type -> hr.leave.v1.ListLeaveRequestsRequest
	4,  // 26: hr.leave.v1.LeaveService.CreateLeaveRequest:input_type -> hr.leave.v1.CreateLeaveRequestRequest
	8,  // 27: hr.leave.v1.LeaveService.UpdateLeaveRequest:input_type -> hr.leave.v1.UpdateLeaveRequestRequest
	15, // 28: hr.leave.v1.LeaveService.RejectLeaveRequest:input_type -> hr.leave.v1.RejectLeaveRequestRequest
	13, // 29: hr.leave.v1.LeaveService.ApproveLeaveRequest:input_type -> hr.leave.v1.ApproveLeaveRequestRequest
	17, // 30: hr.leave.v1.LeaveService.GetEmployeeLeaveBalance:input_type -> hr.leave.v1.GetEmployeeLeaveBalanceRequest
	7,  // 31: hr.leave.v1.LeaveService.GetLeaveRequest:output_type -> hr.leave.v1.GetLeaveRequestResponse
	20, // 32: hr.leave.v1.LeaveService.DeleteLeaveRequest:output_type -> google.protobuf.Empty
	12, // 33: hr.leave.v1.LeaveService.ListLeaveRequests:output_type -> hr.leave.v1.ListLeaveRequestsResponse
	5,  // 34: hr.leave.v1.LeaveService.CreateLeaveRequest:output_type -> hr.leave.v1.CreateLeaveRequestResponse
	9,  // 35: hr.leave.v1.LeaveService.UpdateLeaveRequest:output_type -> hr.leave.v1.UpdateLeaveRequestResponse
	16, // 36: hr.leave.v1.LeaveService.RejectLeaveRequest:output_type -> hr.leave.v1.RejectLeaveRequestResponse
	14, // 37: hr.leave.v1.LeaveService.ApproveLeaveRequest:output_type -> hr.leave.v1.ApproveLeaveRequestResponse
	18, // 38: hr.leave.v1.LeaveService.GetEmployeeLeaveBalance:output_type -> hr.leave.v1.GetEmployeeLeaveBalanceResponse
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_leave_proto_init() }
func file_leave_proto_init() {
	if File_leave_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_leave_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_leave_proto_goTypes,
		DependencyIndexes: file_leave_proto_depIdxs,
		EnumInfos:         file_leave_proto_enumTypes,
		MessageInfos:      file_leave_proto_msgTypes,
	}.Build()
	File_leave_proto = out.File
	file_leave_proto_rawDesc = nil
	file_leave_proto_goTypes = nil
	file_leave_proto_depIdxs = nil
}
