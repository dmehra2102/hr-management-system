// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: leave.proto

package leavev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeaveService_GetLeaveRequest_FullMethodName         = "/hr.leave.v1.LeaveService/GetLeaveRequest"
	LeaveService_DeleteLeaveRequest_FullMethodName      = "/hr.leave.v1.LeaveService/DeleteLeaveRequest"
	LeaveService_ListLeaveRequests_FullMethodName       = "/hr.leave.v1.LeaveService/ListLeaveRequests"
	LeaveService_CreateLeaveRequest_FullMethodName      = "/hr.leave.v1.LeaveService/CreateLeaveRequest"
	LeaveService_UpdateLeaveRequest_FullMethodName      = "/hr.leave.v1.LeaveService/UpdateLeaveRequest"
	LeaveService_RejectLeaveRequest_FullMethodName      = "/hr.leave.v1.LeaveService/RejectLeaveRequest"
	LeaveService_ApproveLeaveRequest_FullMethodName     = "/hr.leave.v1.LeaveService/ApproveLeaveRequest"
	LeaveService_GetEmployeeLeaveBalance_FullMethodName = "/hr.leave.v1.LeaveService/GetEmployeeLeaveBalance"
)

// LeaveServiceClient is the client API for LeaveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaveServiceClient interface {
	GetLeaveRequest(ctx context.Context, in *GetLeaveRequestRequest, opts ...grpc.CallOption) (*GetLeaveRequestResponse, error)
	DeleteLeaveRequest(ctx context.Context, in *DeleteLeaveRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListLeaveRequests(ctx context.Context, in *ListLeaveRequestsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error)
	CreateLeaveRequest(ctx context.Context, in *CreateLeaveRequestRequest, opts ...grpc.CallOption) (*CreateLeaveRequestResponse, error)
	UpdateLeaveRequest(ctx context.Context, in *UpdateLeaveRequestRequest, opts ...grpc.CallOption) (*UpdateLeaveRequestResponse, error)
	RejectLeaveRequest(ctx context.Context, in *RejectLeaveRequestRequest, opts ...grpc.CallOption) (*RejectLeaveRequestResponse, error)
	ApproveLeaveRequest(ctx context.Context, in *ApproveLeaveRequestRequest, opts ...grpc.CallOption) (*ApproveLeaveRequestResponse, error)
	GetEmployeeLeaveBalance(ctx context.Context, in *GetEmployeeLeaveBalanceRequest, opts ...grpc.CallOption) (*GetEmployeeLeaveBalanceResponse, error)
}

type leaveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveServiceClient(cc grpc.ClientConnInterface) LeaveServiceClient {
	return &leaveServiceClient{cc}
}

func (c *leaveServiceClient) GetLeaveRequest(ctx context.Context, in *GetLeaveRequestRequest, opts ...grpc.CallOption) (*GetLeaveRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaveRequestResponse)
	err := c.cc.Invoke(ctx, LeaveService_GetLeaveRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveServiceClient) DeleteLeaveRequest(ctx context.Context, in *DeleteLeaveRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeaveService_DeleteLeaveRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveServiceClient) ListLeaveRequests(ctx context.Context, in *ListLeaveRequestsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLeaveRequestsResponse)
	err := c.cc.Invoke(ctx, LeaveService_ListLeaveRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveServiceClient) CreateLeaveRequest(ctx context.Context, in *CreateLeaveRequestRequest, opts ...grpc.CallOption) (*CreateLeaveRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLeaveRequestResponse)
	err := c.cc.Invoke(ctx, LeaveService_CreateLeaveRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveServiceClient) UpdateLeaveRequest(ctx context.Context, in *UpdateLeaveRequestRequest, opts ...grpc.CallOption) (*UpdateLeaveRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLeaveRequestResponse)
	err := c.cc.Invoke(ctx, LeaveService_UpdateLeaveRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveServiceClient) RejectLeaveRequest(ctx context.Context, in *RejectLeaveRequestRequest, opts ...grpc.CallOption) (*RejectLeaveRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectLeaveRequestResponse)
	err := c.cc.Invoke(ctx, LeaveService_RejectLeaveRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveServiceClient) ApproveLeaveRequest(ctx context.Context, in *ApproveLeaveRequestRequest, opts ...grpc.CallOption) (*ApproveLeaveRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveLeaveRequestResponse)
	err := c.cc.Invoke(ctx, LeaveService_ApproveLeaveRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveServiceClient) GetEmployeeLeaveBalance(ctx context.Context, in *GetEmployeeLeaveBalanceRequest, opts ...grpc.CallOption) (*GetEmployeeLeaveBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmployeeLeaveBalanceResponse)
	err := c.cc.Invoke(ctx, LeaveService_GetEmployeeLeaveBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveServiceServer is the server API for LeaveService service.
// All implementations must embed UnimplementedLeaveServiceServer
// for forward compatibility.
type LeaveServiceServer interface {
	GetLeaveRequest(context.Context, *GetLeaveRequestRequest) (*GetLeaveRequestResponse, error)
	DeleteLeaveRequest(context.Context, *DeleteLeaveRequestRequest) (*emptypb.Empty, error)
	ListLeaveRequests(context.Context, *ListLeaveRequestsRequest) (*ListLeaveRequestsResponse, error)
	CreateLeaveRequest(context.Context, *CreateLeaveRequestRequest) (*CreateLeaveRequestResponse, error)
	UpdateLeaveRequest(context.Context, *UpdateLeaveRequestRequest) (*UpdateLeaveRequestResponse, error)
	RejectLeaveRequest(context.Context, *RejectLeaveRequestRequest) (*RejectLeaveRequestResponse, error)
	ApproveLeaveRequest(context.Context, *ApproveLeaveRequestRequest) (*ApproveLeaveRequestResponse, error)
	GetEmployeeLeaveBalance(context.Context, *GetEmployeeLeaveBalanceRequest) (*GetEmployeeLeaveBalanceResponse, error)
	mustEmbedUnimplementedLeaveServiceServer()
}

// UnimplementedLeaveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaveServiceServer struct{}

func (UnimplementedLeaveServiceServer) GetLeaveRequest(context.Context, *GetLeaveRequestRequest) (*GetLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaveRequest not implemented")
}
func (UnimplementedLeaveServiceServer) DeleteLeaveRequest(context.Context, *DeleteLeaveRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeaveRequest not implemented")
}
func (UnimplementedLeaveServiceServer) ListLeaveRequests(context.Context, *ListLeaveRequestsRequest) (*ListLeaveRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeaveRequests not implemented")
}
func (UnimplementedLeaveServiceServer) CreateLeaveRequest(context.Context, *CreateLeaveRequestRequest) (*CreateLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeaveRequest not implemented")
}
func (UnimplementedLeaveServiceServer) UpdateLeaveRequest(context.Context, *UpdateLeaveRequestRequest) (*UpdateLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeaveRequest not implemented")
}
func (UnimplementedLeaveServiceServer) RejectLeaveRequest(context.Context, *RejectLeaveRequestRequest) (*RejectLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectLeaveRequest not implemented")
}
func (UnimplementedLeaveServiceServer) ApproveLeaveRequest(context.Context, *ApproveLeaveRequestRequest) (*ApproveLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLeaveRequest not implemented")
}
func (UnimplementedLeaveServiceServer) GetEmployeeLeaveBalance(context.Context, *GetEmployeeLeaveBalanceRequest) (*GetEmployeeLeaveBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeLeaveBalance not implemented")
}
func (UnimplementedLeaveServiceServer) mustEmbedUnimplementedLeaveServiceServer() {}
func (UnimplementedLeaveServiceServer) testEmbeddedByValue()                      {}

// UnsafeLeaveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveServiceServer will
// result in compilation errors.
type UnsafeLeaveServiceServer interface {
	mustEmbedUnimplementedLeaveServiceServer()
}

func RegisterLeaveServiceServer(s grpc.ServiceRegistrar, srv LeaveServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaveService_ServiceDesc, srv)
}

func _LeaveService_GetLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).GetLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_GetLeaveRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).GetLeaveRequest(ctx, req.(*GetLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveService_DeleteLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).DeleteLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_DeleteLeaveRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).DeleteLeaveRequest(ctx, req.(*DeleteLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveService_ListLeaveRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaveRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).ListLeaveRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_ListLeaveRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).ListLeaveRequests(ctx, req.(*ListLeaveRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveService_CreateLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).CreateLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_CreateLeaveRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).CreateLeaveRequest(ctx, req.(*CreateLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveService_UpdateLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).UpdateLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_UpdateLeaveRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).UpdateLeaveRequest(ctx, req.(*UpdateLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveService_RejectLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).RejectLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_RejectLeaveRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).RejectLeaveRequest(ctx, req.(*RejectLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveService_ApproveLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).ApproveLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_ApproveLeaveRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).ApproveLeaveRequest(ctx, req.(*ApproveLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveService_GetEmployeeLeaveBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeLeaveBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).GetEmployeeLeaveBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_GetEmployeeLeaveBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).GetEmployeeLeaveBalance(ctx, req.(*GetEmployeeLeaveBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveService_ServiceDesc is the grpc.ServiceDesc for LeaveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hr.leave.v1.LeaveService",
	HandlerType: (*LeaveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaveRequest",
			Handler:    _LeaveService_GetLeaveRequest_Handler,
		},
		{
			MethodName: "DeleteLeaveRequest",
			Handler:    _LeaveService_DeleteLeaveRequest_Handler,
		},
		{
			MethodName: "ListLeaveRequests",
			Handler:    _LeaveService_ListLeaveRequests_Handler,
		},
		{
			MethodName: "CreateLeaveRequest",
			Handler:    _LeaveService_CreateLeaveRequest_Handler,
		},
		{
			MethodName: "UpdateLeaveRequest",
			Handler:    _LeaveService_UpdateLeaveRequest_Handler,
		},
		{
			MethodName: "RejectLeaveRequest",
			Handler:    _LeaveService_RejectLeaveRequest_Handler,
		},
		{
			MethodName: "ApproveLeaveRequest",
			Handler:    _LeaveService_ApproveLeaveRequest_Handler,
		},
		{
			MethodName: "GetEmployeeLeaveBalance",
			Handler:    _LeaveService_GetEmployeeLeaveBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leave.proto",
}
