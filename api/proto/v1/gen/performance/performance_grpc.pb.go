// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: performance.proto

package performancev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PerformanceService_DeletePerformanceReview_FullMethodName       = "/hr.performance.v1.PerformanceService/DeletePerformanceReview"
	PerformanceService_GetPerformanceReview_FullMethodName          = "/hr.performance.v1.PerformanceService/GetPerformanceReview"
	PerformanceService_ListPerformanceReviews_FullMethodName        = "/hr.performance.v1.PerformanceService/ListPerformanceReviews"
	PerformanceService_UpdatePerformanceReview_FullMethodName       = "/hr.performance.v1.PerformanceService/UpdatePerformanceReview"
	PerformanceService_SubmitPerformanceReview_FullMethodName       = "/hr.performance.v1.PerformanceService/SubmitPerformanceReview"
	PerformanceService_CreatePerformanceReview_FullMethodName       = "/hr.performance.v1.PerformanceService/CreatePerformanceReview"
	PerformanceService_GetEmployeePerformanceHistory_FullMethodName = "/hr.performance.v1.PerformanceService/GetEmployeePerformanceHistory"
)

// PerformanceServiceClient is the client API for PerformanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerformanceServiceClient interface {
	DeletePerformanceReview(ctx context.Context, in *DeletePerformanceReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPerformanceReview(ctx context.Context, in *GetPerformanceReviewRequest, opts ...grpc.CallOption) (*GetPerformanceReviewResponse, error)
	ListPerformanceReviews(ctx context.Context, in *ListPerformanceReviewsRequest, opts ...grpc.CallOption) (*ListPerformanceReviewsResponse, error)
	UpdatePerformanceReview(ctx context.Context, in *UpdatePerformanceReviewRequest, opts ...grpc.CallOption) (*UpdatePerformanceReviewResponse, error)
	SubmitPerformanceReview(ctx context.Context, in *SubmitPerformanceReviewRequest, opts ...grpc.CallOption) (*SubmitPerformanceReviewResponse, error)
	CreatePerformanceReview(ctx context.Context, in *CreatePerformanceReviewRequest, opts ...grpc.CallOption) (*CreatePerformanceReviewResponse, error)
	GetEmployeePerformanceHistory(ctx context.Context, in *GetEmployeePerformanceHistoryRequest, opts ...grpc.CallOption) (*GetEmployeePerformanceHistoryResponse, error)
}

type performanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerformanceServiceClient(cc grpc.ClientConnInterface) PerformanceServiceClient {
	return &performanceServiceClient{cc}
}

func (c *performanceServiceClient) DeletePerformanceReview(ctx context.Context, in *DeletePerformanceReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PerformanceService_DeletePerformanceReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) GetPerformanceReview(ctx context.Context, in *GetPerformanceReviewRequest, opts ...grpc.CallOption) (*GetPerformanceReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPerformanceReviewResponse)
	err := c.cc.Invoke(ctx, PerformanceService_GetPerformanceReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) ListPerformanceReviews(ctx context.Context, in *ListPerformanceReviewsRequest, opts ...grpc.CallOption) (*ListPerformanceReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPerformanceReviewsResponse)
	err := c.cc.Invoke(ctx, PerformanceService_ListPerformanceReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) UpdatePerformanceReview(ctx context.Context, in *UpdatePerformanceReviewRequest, opts ...grpc.CallOption) (*UpdatePerformanceReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePerformanceReviewResponse)
	err := c.cc.Invoke(ctx, PerformanceService_UpdatePerformanceReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) SubmitPerformanceReview(ctx context.Context, in *SubmitPerformanceReviewRequest, opts ...grpc.CallOption) (*SubmitPerformanceReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitPerformanceReviewResponse)
	err := c.cc.Invoke(ctx, PerformanceService_SubmitPerformanceReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) CreatePerformanceReview(ctx context.Context, in *CreatePerformanceReviewRequest, opts ...grpc.CallOption) (*CreatePerformanceReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePerformanceReviewResponse)
	err := c.cc.Invoke(ctx, PerformanceService_CreatePerformanceReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) GetEmployeePerformanceHistory(ctx context.Context, in *GetEmployeePerformanceHistoryRequest, opts ...grpc.CallOption) (*GetEmployeePerformanceHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmployeePerformanceHistoryResponse)
	err := c.cc.Invoke(ctx, PerformanceService_GetEmployeePerformanceHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerformanceServiceServer is the server API for PerformanceService service.
// All implementations must embed UnimplementedPerformanceServiceServer
// for forward compatibility.
type PerformanceServiceServer interface {
	DeletePerformanceReview(context.Context, *DeletePerformanceReviewRequest) (*emptypb.Empty, error)
	GetPerformanceReview(context.Context, *GetPerformanceReviewRequest) (*GetPerformanceReviewResponse, error)
	ListPerformanceReviews(context.Context, *ListPerformanceReviewsRequest) (*ListPerformanceReviewsResponse, error)
	UpdatePerformanceReview(context.Context, *UpdatePerformanceReviewRequest) (*UpdatePerformanceReviewResponse, error)
	SubmitPerformanceReview(context.Context, *SubmitPerformanceReviewRequest) (*SubmitPerformanceReviewResponse, error)
	CreatePerformanceReview(context.Context, *CreatePerformanceReviewRequest) (*CreatePerformanceReviewResponse, error)
	GetEmployeePerformanceHistory(context.Context, *GetEmployeePerformanceHistoryRequest) (*GetEmployeePerformanceHistoryResponse, error)
	mustEmbedUnimplementedPerformanceServiceServer()
}

// UnimplementedPerformanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPerformanceServiceServer struct{}

func (UnimplementedPerformanceServiceServer) DeletePerformanceReview(context.Context, *DeletePerformanceReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerformanceReview not implemented")
}
func (UnimplementedPerformanceServiceServer) GetPerformanceReview(context.Context, *GetPerformanceReviewRequest) (*GetPerformanceReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceReview not implemented")
}
func (UnimplementedPerformanceServiceServer) ListPerformanceReviews(context.Context, *ListPerformanceReviewsRequest) (*ListPerformanceReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPerformanceReviews not implemented")
}
func (UnimplementedPerformanceServiceServer) UpdatePerformanceReview(context.Context, *UpdatePerformanceReviewRequest) (*UpdatePerformanceReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerformanceReview not implemented")
}
func (UnimplementedPerformanceServiceServer) SubmitPerformanceReview(context.Context, *SubmitPerformanceReviewRequest) (*SubmitPerformanceReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPerformanceReview not implemented")
}
func (UnimplementedPerformanceServiceServer) CreatePerformanceReview(context.Context, *CreatePerformanceReviewRequest) (*CreatePerformanceReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerformanceReview not implemented")
}
func (UnimplementedPerformanceServiceServer) GetEmployeePerformanceHistory(context.Context, *GetEmployeePerformanceHistoryRequest) (*GetEmployeePerformanceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeePerformanceHistory not implemented")
}
func (UnimplementedPerformanceServiceServer) mustEmbedUnimplementedPerformanceServiceServer() {}
func (UnimplementedPerformanceServiceServer) testEmbeddedByValue()                            {}

// UnsafePerformanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerformanceServiceServer will
// result in compilation errors.
type UnsafePerformanceServiceServer interface {
	mustEmbedUnimplementedPerformanceServiceServer()
}

func RegisterPerformanceServiceServer(s grpc.ServiceRegistrar, srv PerformanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedPerformanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PerformanceService_ServiceDesc, srv)
}

func _PerformanceService_DeletePerformanceReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePerformanceReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).DeletePerformanceReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_DeletePerformanceReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).DeletePerformanceReview(ctx, req.(*DeletePerformanceReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_GetPerformanceReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).GetPerformanceReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_GetPerformanceReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).GetPerformanceReview(ctx, req.(*GetPerformanceReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_ListPerformanceReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPerformanceReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).ListPerformanceReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_ListPerformanceReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).ListPerformanceReviews(ctx, req.(*ListPerformanceReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_UpdatePerformanceReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePerformanceReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).UpdatePerformanceReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_UpdatePerformanceReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).UpdatePerformanceReview(ctx, req.(*UpdatePerformanceReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_SubmitPerformanceReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPerformanceReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).SubmitPerformanceReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_SubmitPerformanceReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).SubmitPerformanceReview(ctx, req.(*SubmitPerformanceReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_CreatePerformanceReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePerformanceReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).CreatePerformanceReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_CreatePerformanceReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).CreatePerformanceReview(ctx, req.(*CreatePerformanceReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_GetEmployeePerformanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeePerformanceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).GetEmployeePerformanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_GetEmployeePerformanceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).GetEmployeePerformanceHistory(ctx, req.(*GetEmployeePerformanceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PerformanceService_ServiceDesc is the grpc.ServiceDesc for PerformanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerformanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hr.performance.v1.PerformanceService",
	HandlerType: (*PerformanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeletePerformanceReview",
			Handler:    _PerformanceService_DeletePerformanceReview_Handler,
		},
		{
			MethodName: "GetPerformanceReview",
			Handler:    _PerformanceService_GetPerformanceReview_Handler,
		},
		{
			MethodName: "ListPerformanceReviews",
			Handler:    _PerformanceService_ListPerformanceReviews_Handler,
		},
		{
			MethodName: "UpdatePerformanceReview",
			Handler:    _PerformanceService_UpdatePerformanceReview_Handler,
		},
		{
			MethodName: "SubmitPerformanceReview",
			Handler:    _PerformanceService_SubmitPerformanceReview_Handler,
		},
		{
			MethodName: "CreatePerformanceReview",
			Handler:    _PerformanceService_CreatePerformanceReview_Handler,
		},
		{
			MethodName: "GetEmployeePerformanceHistory",
			Handler:    _PerformanceService_GetEmployeePerformanceHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "performance.proto",
}
