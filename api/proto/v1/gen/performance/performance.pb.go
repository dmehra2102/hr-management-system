// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.28.3
// source: performance.proto

package performancev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReviewPeriod int32

const (
	ReviewPeriod_REVIEW_PERIOD_UNSPECIFIED ReviewPeriod = 0
	ReviewPeriod_REVIEW_PERIOD_QUARTERLY   ReviewPeriod = 1
	ReviewPeriod_REVIEW_PERIOD_HALF_YEARLY ReviewPeriod = 2
	ReviewPeriod_REVIEW_PERIOD_ANNUAL      ReviewPeriod = 3
	ReviewPeriod_REVIEW_PERIOD_PROBATION   ReviewPeriod = 4
)

// Enum value maps for ReviewPeriod.
var (
	ReviewPeriod_name = map[int32]string{
		0: "REVIEW_PERIOD_UNSPECIFIED",
		1: "REVIEW_PERIOD_QUARTERLY",
		2: "REVIEW_PERIOD_HALF_YEARLY",
		3: "REVIEW_PERIOD_ANNUAL",
		4: "REVIEW_PERIOD_PROBATION",
	}
	ReviewPeriod_value = map[string]int32{
		"REVIEW_PERIOD_UNSPECIFIED": 0,
		"REVIEW_PERIOD_QUARTERLY":   1,
		"REVIEW_PERIOD_HALF_YEARLY": 2,
		"REVIEW_PERIOD_ANNUAL":      3,
		"REVIEW_PERIOD_PROBATION":   4,
	}
)

func (x ReviewPeriod) Enum() *ReviewPeriod {
	p := new(ReviewPeriod)
	*p = x
	return p
}

func (x ReviewPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_performance_proto_enumTypes[0].Descriptor()
}

func (ReviewPeriod) Type() protoreflect.EnumType {
	return &file_performance_proto_enumTypes[0]
}

func (x ReviewPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewPeriod.Descriptor instead.
func (ReviewPeriod) EnumDescriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0}
}

type ReviewStatus int32

const (
	ReviewStatus_REVIEW_STATUS_UNSPECIFIED ReviewStatus = 0
	ReviewStatus_REVIEW_STATUS_DRAFT       ReviewStatus = 1
	ReviewStatus_REVIEW_STATUS_SUBMITTED   ReviewStatus = 2
	ReviewStatus_REVIEW_STATUS_COMPLETED   ReviewStatus = 3
	ReviewStatus_REVIEW_STATUS_ARCHIVED    ReviewStatus = 4
)

// Enum value maps for ReviewStatus.
var (
	ReviewStatus_name = map[int32]string{
		0: "REVIEW_STATUS_UNSPECIFIED",
		1: "REVIEW_STATUS_DRAFT",
		2: "REVIEW_STATUS_SUBMITTED",
		3: "REVIEW_STATUS_COMPLETED",
		4: "REVIEW_STATUS_ARCHIVED",
	}
	ReviewStatus_value = map[string]int32{
		"REVIEW_STATUS_UNSPECIFIED": 0,
		"REVIEW_STATUS_DRAFT":       1,
		"REVIEW_STATUS_SUBMITTED":   2,
		"REVIEW_STATUS_COMPLETED":   3,
		"REVIEW_STATUS_ARCHIVED":    4,
	}
)

func (x ReviewStatus) Enum() *ReviewStatus {
	p := new(ReviewStatus)
	*p = x
	return p
}

func (x ReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_performance_proto_enumTypes[1].Descriptor()
}

func (ReviewStatus) Type() protoreflect.EnumType {
	return &file_performance_proto_enumTypes[1]
}

func (x ReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewStatus.Descriptor instead.
func (ReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{1}
}

type GoalStatus int32

const (
	GoalStatus_GOAL_STATUS_UNSPECIFIED  GoalStatus = 0
	GoalStatus_GOAL_STATUS_NOT_STARTED  GoalStatus = 1
	GoalStatus_GOAL_STATUS_IN_PROGRESS  GoalStatus = 2
	GoalStatus_GOAL_STATUS_COMPLETED    GoalStatus = 3
	GoalStatus_GOAL_STATUS_EXCEEDED     GoalStatus = 4
	GoalStatus_GOAL_STATUS_NOT_ACHIEVED GoalStatus = 5
)

// Enum value maps for GoalStatus.
var (
	GoalStatus_name = map[int32]string{
		0: "GOAL_STATUS_UNSPECIFIED",
		1: "GOAL_STATUS_NOT_STARTED",
		2: "GOAL_STATUS_IN_PROGRESS",
		3: "GOAL_STATUS_COMPLETED",
		4: "GOAL_STATUS_EXCEEDED",
		5: "GOAL_STATUS_NOT_ACHIEVED",
	}
	GoalStatus_value = map[string]int32{
		"GOAL_STATUS_UNSPECIFIED":  0,
		"GOAL_STATUS_NOT_STARTED":  1,
		"GOAL_STATUS_IN_PROGRESS":  2,
		"GOAL_STATUS_COMPLETED":    3,
		"GOAL_STATUS_EXCEEDED":     4,
		"GOAL_STATUS_NOT_ACHIEVED": 5,
	}
)

func (x GoalStatus) Enum() *GoalStatus {
	p := new(GoalStatus)
	*p = x
	return p
}

func (x GoalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_performance_proto_enumTypes[2].Descriptor()
}

func (GoalStatus) Type() protoreflect.EnumType {
	return &file_performance_proto_enumTypes[2]
}

func (x GoalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalStatus.Descriptor instead.
func (GoalStatus) EnumDescriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{2}
}

type PerformanceReview struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EmployeeId      string                 `protobuf:"bytes,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	EmployeeName    string                 `protobuf:"bytes,3,opt,name=employee_name,json=employeeName,proto3" json:"employee_name,omitempty"`
	ReviewerId      string                 `protobuf:"bytes,4,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id,omitempty"`
	ReviewerName    string                 `protobuf:"bytes,5,opt,name=reviewer_name,json=reviewerName,proto3" json:"reviewer_name,omitempty"`
	ReviewPeriod    ReviewPeriod           `protobuf:"varint,6,opt,name=review_period,json=reviewPeriod,proto3,enum=hr.performance.v1.ReviewPeriod" json:"review_period,omitempty"`
	Status          ReviewStatus           `protobuf:"varint,7,opt,name=status,proto3,enum=hr.performance.v1.ReviewStatus" json:"status,omitempty"`
	Goals           []*Goal                `protobuf:"bytes,8,rep,name=goals,proto3" json:"goals,omitempty"`
	Competencies    []*Competency          `protobuf:"bytes,9,rep,name=competencies,proto3" json:"competencies,omitempty"`
	OverallComments string                 `protobuf:"bytes,10,opt,name=overall_comments,json=overallComments,proto3" json:"overall_comments,omitempty"`
	OverallRating   float64                `protobuf:"fixed64,11,opt,name=overall_rating,json=overallRating,proto3" json:"overall_rating,omitempty"`
	ReviewDate      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=review_date,json=reviewDate,proto3" json:"review_date,omitempty"`
	SubmittedAt     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PerformanceReview) Reset() {
	*x = PerformanceReview{}
	mi := &file_performance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceReview) ProtoMessage() {}

func (x *PerformanceReview) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceReview.ProtoReflect.Descriptor instead.
func (*PerformanceReview) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0}
}

func (x *PerformanceReview) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PerformanceReview) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *PerformanceReview) GetEmployeeName() string {
	if x != nil {
		return x.EmployeeName
	}
	return ""
}

func (x *PerformanceReview) GetReviewerId() string {
	if x != nil {
		return x.ReviewerId
	}
	return ""
}

func (x *PerformanceReview) GetReviewerName() string {
	if x != nil {
		return x.ReviewerName
	}
	return ""
}

func (x *PerformanceReview) GetReviewPeriod() ReviewPeriod {
	if x != nil {
		return x.ReviewPeriod
	}
	return ReviewPeriod_REVIEW_PERIOD_UNSPECIFIED
}

func (x *PerformanceReview) GetStatus() ReviewStatus {
	if x != nil {
		return x.Status
	}
	return ReviewStatus_REVIEW_STATUS_UNSPECIFIED
}

func (x *PerformanceReview) GetGoals() []*Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *PerformanceReview) GetCompetencies() []*Competency {
	if x != nil {
		return x.Competencies
	}
	return nil
}

func (x *PerformanceReview) GetOverallComments() string {
	if x != nil {
		return x.OverallComments
	}
	return ""
}

func (x *PerformanceReview) GetOverallRating() float64 {
	if x != nil {
		return x.OverallRating
	}
	return 0
}

func (x *PerformanceReview) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *PerformanceReview) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *PerformanceReview) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PerformanceReview) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Goal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TargetValue   float64                `protobuf:"fixed64,4,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	AchievedValue float64                `protobuf:"fixed64,5,opt,name=achieved_value,json=achievedValue,proto3" json:"achieved_value,omitempty"`
	Uint          string                 `protobuf:"bytes,6,opt,name=uint,proto3" json:"uint,omitempty"`
	Status        GoalStatus             `protobuf:"varint,7,opt,name=status,proto3,enum=hr.performance.v1.GoalStatus" json:"status,omitempty"`
	Weight        float64                `protobuf:"fixed64,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Comments      string                 `protobuf:"bytes,9,opt,name=comments,proto3" json:"comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Goal) Reset() {
	*x = Goal{}
	mi := &file_performance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Goal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal) ProtoMessage() {}

func (x *Goal) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal.ProtoReflect.Descriptor instead.
func (*Goal) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{1}
}

func (x *Goal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Goal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Goal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Goal) GetTargetValue() float64 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *Goal) GetAchievedValue() float64 {
	if x != nil {
		return x.AchievedValue
	}
	return 0
}

func (x *Goal) GetUint() string {
	if x != nil {
		return x.Uint
	}
	return ""
}

func (x *Goal) GetStatus() GoalStatus {
	if x != nil {
		return x.Status
	}
	return GoalStatus_GOAL_STATUS_UNSPECIFIED
}

func (x *Goal) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Goal) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type Competency struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Rating        float64                `protobuf:"fixed64,4,opt,name=rating,proto3" json:"rating,omitempty"`
	MaxRating     float64                `protobuf:"fixed64,5,opt,name=max_rating,json=maxRating,proto3" json:"max_rating,omitempty"`
	Comments      string                 `protobuf:"bytes,6,opt,name=comments,proto3" json:"comments,omitempty"`
	Weight        float64                `protobuf:"fixed64,7,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Competency) Reset() {
	*x = Competency{}
	mi := &file_performance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Competency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Competency) ProtoMessage() {}

func (x *Competency) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Competency.ProtoReflect.Descriptor instead.
func (*Competency) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{2}
}

func (x *Competency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Competency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Competency) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Competency) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Competency) GetMaxRating() float64 {
	if x != nil {
		return x.MaxRating
	}
	return 0
}

func (x *Competency) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *Competency) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type CreatePerformanceReviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmployeeId    string                 `protobuf:"bytes,1,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	ReviewerId    string                 `protobuf:"bytes,2,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id,omitempty"`
	ReviewPeriod  ReviewPeriod           `protobuf:"varint,3,opt,name=review_period,json=reviewPeriod,proto3,enum=hr.performance.v1.ReviewPeriod" json:"review_period,omitempty"`
	ReviewDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=review_date,json=reviewDate,proto3" json:"review_date,omitempty"`
	Goals         []*Goal                `protobuf:"bytes,5,rep,name=goals,proto3" json:"goals,omitempty"`
	Competencies  []*Competency          `protobuf:"bytes,6,rep,name=competencies,proto3" json:"competencies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePerformanceReviewRequest) Reset() {
	*x = CreatePerformanceReviewRequest{}
	mi := &file_performance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePerformanceReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePerformanceReviewRequest) ProtoMessage() {}

func (x *CreatePerformanceReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePerformanceReviewRequest.ProtoReflect.Descriptor instead.
func (*CreatePerformanceReviewRequest) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePerformanceReviewRequest) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *CreatePerformanceReviewRequest) GetReviewerId() string {
	if x != nil {
		return x.ReviewerId
	}
	return ""
}

func (x *CreatePerformanceReviewRequest) GetReviewPeriod() ReviewPeriod {
	if x != nil {
		return x.ReviewPeriod
	}
	return ReviewPeriod_REVIEW_PERIOD_UNSPECIFIED
}

func (x *CreatePerformanceReviewRequest) GetReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewDate
	}
	return nil
}

func (x *CreatePerformanceReviewRequest) GetGoals() []*Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *CreatePerformanceReviewRequest) GetCompetencies() []*Competency {
	if x != nil {
		return x.Competencies
	}
	return nil
}

type CreatePerformanceReviewResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PerformanceReview *PerformanceReview     `protobuf:"bytes,1,opt,name=performance_review,json=performanceReview,proto3" json:"performance_review,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreatePerformanceReviewResponse) Reset() {
	*x = CreatePerformanceReviewResponse{}
	mi := &file_performance_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePerformanceReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePerformanceReviewResponse) ProtoMessage() {}

func (x *CreatePerformanceReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePerformanceReviewResponse.ProtoReflect.Descriptor instead.
func (*CreatePerformanceReviewResponse) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePerformanceReviewResponse) GetPerformanceReview() *PerformanceReview {
	if x != nil {
		return x.PerformanceReview
	}
	return nil
}

type GetPerformanceReviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPerformanceReviewRequest) Reset() {
	*x = GetPerformanceReviewRequest{}
	mi := &file_performance_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPerformanceReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceReviewRequest) ProtoMessage() {}

func (x *GetPerformanceReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceReviewRequest.ProtoReflect.Descriptor instead.
func (*GetPerformanceReviewRequest) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{5}
}

func (x *GetPerformanceReviewRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPerformanceReviewResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PerformanceReview *PerformanceReview     `protobuf:"bytes,1,opt,name=performance_review,json=performanceReview,proto3" json:"performance_review,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetPerformanceReviewResponse) Reset() {
	*x = GetPerformanceReviewResponse{}
	mi := &file_performance_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPerformanceReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceReviewResponse) ProtoMessage() {}

func (x *GetPerformanceReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceReviewResponse.ProtoReflect.Descriptor instead.
func (*GetPerformanceReviewResponse) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{6}
}

func (x *GetPerformanceReviewResponse) GetPerformanceReview() *PerformanceReview {
	if x != nil {
		return x.PerformanceReview
	}
	return nil
}

type UpdatePerformanceReviewRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Goals           []*Goal                `protobuf:"bytes,2,rep,name=goals,proto3" json:"goals,omitempty"`
	Competencies    []*Competency          `protobuf:"bytes,3,rep,name=competencies,proto3" json:"competencies,omitempty"`
	OverallComments string                 `protobuf:"bytes,4,opt,name=overall_comments,json=overallComments,proto3" json:"overall_comments,omitempty"`
	OverallRating   float64                `protobuf:"fixed64,5,opt,name=overall_rating,json=overallRating,proto3" json:"overall_rating,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdatePerformanceReviewRequest) Reset() {
	*x = UpdatePerformanceReviewRequest{}
	mi := &file_performance_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePerformanceReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePerformanceReviewRequest) ProtoMessage() {}

func (x *UpdatePerformanceReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePerformanceReviewRequest.ProtoReflect.Descriptor instead.
func (*UpdatePerformanceReviewRequest) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePerformanceReviewRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePerformanceReviewRequest) GetGoals() []*Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *UpdatePerformanceReviewRequest) GetCompetencies() []*Competency {
	if x != nil {
		return x.Competencies
	}
	return nil
}

func (x *UpdatePerformanceReviewRequest) GetOverallComments() string {
	if x != nil {
		return x.OverallComments
	}
	return ""
}

func (x *UpdatePerformanceReviewRequest) GetOverallRating() float64 {
	if x != nil {
		return x.OverallRating
	}
	return 0
}

type UpdatePerformanceReviewResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PerformanceReview *PerformanceReview     `protobuf:"bytes,1,opt,name=performance_review,json=performanceReview,proto3" json:"performance_review,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdatePerformanceReviewResponse) Reset() {
	*x = UpdatePerformanceReviewResponse{}
	mi := &file_performance_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePerformanceReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePerformanceReviewResponse) ProtoMessage() {}

func (x *UpdatePerformanceReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePerformanceReviewResponse.ProtoReflect.Descriptor instead.
func (*UpdatePerformanceReviewResponse) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePerformanceReviewResponse) GetPerformanceReview() *PerformanceReview {
	if x != nil {
		return x.PerformanceReview
	}
	return nil
}

type DeletePerformanceReviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePerformanceReviewRequest) Reset() {
	*x = DeletePerformanceReviewRequest{}
	mi := &file_performance_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePerformanceReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePerformanceReviewRequest) ProtoMessage() {}

func (x *DeletePerformanceReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePerformanceReviewRequest.ProtoReflect.Descriptor instead.
func (*DeletePerformanceReviewRequest) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{9}
}

func (x *DeletePerformanceReviewRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListPerformanceReviewsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	EmployeeId    string                 `protobuf:"bytes,3,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	ReviewerId    string                 `protobuf:"bytes,4,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id,omitempty"`
	Status        ReviewStatus           `protobuf:"varint,5,opt,name=status,proto3,enum=hr.performance.v1.ReviewStatus" json:"status,omitempty"`
	ReviewPeriod  ReviewPeriod           `protobuf:"varint,6,opt,name=review_period,json=reviewPeriod,proto3,enum=hr.performance.v1.ReviewPeriod" json:"review_period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPerformanceReviewsRequest) Reset() {
	*x = ListPerformanceReviewsRequest{}
	mi := &file_performance_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPerformanceReviewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPerformanceReviewsRequest) ProtoMessage() {}

func (x *ListPerformanceReviewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPerformanceReviewsRequest.ProtoReflect.Descriptor instead.
func (*ListPerformanceReviewsRequest) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{10}
}

func (x *ListPerformanceReviewsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPerformanceReviewsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPerformanceReviewsRequest) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *ListPerformanceReviewsRequest) GetReviewerId() string {
	if x != nil {
		return x.ReviewerId
	}
	return ""
}

func (x *ListPerformanceReviewsRequest) GetStatus() ReviewStatus {
	if x != nil {
		return x.Status
	}
	return ReviewStatus_REVIEW_STATUS_UNSPECIFIED
}

func (x *ListPerformanceReviewsRequest) GetReviewPeriod() ReviewPeriod {
	if x != nil {
		return x.ReviewPeriod
	}
	return ReviewPeriod_REVIEW_PERIOD_UNSPECIFIED
}

type ListPerformanceReviewsResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PerformanceReviews []*PerformanceReview   `protobuf:"bytes,1,rep,name=performance_reviews,json=performanceReviews,proto3" json:"performance_reviews,omitempty"`
	TotalCount         int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page               int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize           int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListPerformanceReviewsResponse) Reset() {
	*x = ListPerformanceReviewsResponse{}
	mi := &file_performance_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPerformanceReviewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPerformanceReviewsResponse) ProtoMessage() {}

func (x *ListPerformanceReviewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPerformanceReviewsResponse.ProtoReflect.Descriptor instead.
func (*ListPerformanceReviewsResponse) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{11}
}

func (x *ListPerformanceReviewsResponse) GetPerformanceReviews() []*PerformanceReview {
	if x != nil {
		return x.PerformanceReviews
	}
	return nil
}

func (x *ListPerformanceReviewsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListPerformanceReviewsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPerformanceReviewsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SubmitPerformanceReviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitPerformanceReviewRequest) Reset() {
	*x = SubmitPerformanceReviewRequest{}
	mi := &file_performance_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitPerformanceReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPerformanceReviewRequest) ProtoMessage() {}

func (x *SubmitPerformanceReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPerformanceReviewRequest.ProtoReflect.Descriptor instead.
func (*SubmitPerformanceReviewRequest) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{12}
}

func (x *SubmitPerformanceReviewRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SubmitPerformanceReviewResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PerformanceReview *PerformanceReview     `protobuf:"bytes,1,opt,name=performance_review,json=performanceReview,proto3" json:"performance_review,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubmitPerformanceReviewResponse) Reset() {
	*x = SubmitPerformanceReviewResponse{}
	mi := &file_performance_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitPerformanceReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPerformanceReviewResponse) ProtoMessage() {}

func (x *SubmitPerformanceReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPerformanceReviewResponse.ProtoReflect.Descriptor instead.
func (*SubmitPerformanceReviewResponse) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{13}
}

func (x *SubmitPerformanceReviewResponse) GetPerformanceReview() *PerformanceReview {
	if x != nil {
		return x.PerformanceReview
	}
	return nil
}

type GetEmployeePerformanceHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmployeeId    string                 `protobuf:"bytes,1,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEmployeePerformanceHistoryRequest) Reset() {
	*x = GetEmployeePerformanceHistoryRequest{}
	mi := &file_performance_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeePerformanceHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeePerformanceHistoryRequest) ProtoMessage() {}

func (x *GetEmployeePerformanceHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeePerformanceHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeePerformanceHistoryRequest) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{14}
}

func (x *GetEmployeePerformanceHistoryRequest) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *GetEmployeePerformanceHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetEmployeePerformanceHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetEmployeePerformanceHistoryResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PerformanceReviews []*PerformanceReview   `protobuf:"bytes,1,rep,name=performance_reviews,json=performanceReviews,proto3" json:"performance_reviews,omitempty"`
	TotalCount         int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page               int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize           int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetEmployeePerformanceHistoryResponse) Reset() {
	*x = GetEmployeePerformanceHistoryResponse{}
	mi := &file_performance_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeePerformanceHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeePerformanceHistoryResponse) ProtoMessage() {}

func (x *GetEmployeePerformanceHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeePerformanceHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetEmployeePerformanceHistoryResponse) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{15}
}

func (x *GetEmployeePerformanceHistoryResponse) GetPerformanceReviews() []*PerformanceReview {
	if x != nil {
		return x.PerformanceReviews
	}
	return nil
}

func (x *GetEmployeePerformanceHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetEmployeePerformanceHistoryResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetEmployeePerformanceHistoryResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

var File_performance_proto protoreflect.FileDescriptor

var file_performance_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x05, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0c,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68,
	0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x05, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x72, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x04,
	0x47, 0x6f, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x72, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68,
	0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22,
	0x76, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0xf4, 0x01, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x41, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x76, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x91, 0x02, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x30, 0x0a, 0x1e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x76,
	0x0a, 0x1f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x78, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xd0, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x2a, 0xa0, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x4c, 0x59, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x9c, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xb6, 0x01, 0x0a, 0x0a, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x44, 0x10, 0x05, 0x32, 0x90,
	0x07, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x31, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x77, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x2e, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x30,
	0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x31, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x31, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x31, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37,
	0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x68, 0x72, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x3b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_performance_proto_rawDescOnce sync.Once
	file_performance_proto_rawDescData = file_performance_proto_rawDesc
)

func file_performance_proto_rawDescGZIP() []byte {
	file_performance_proto_rawDescOnce.Do(func() {
		file_performance_proto_rawDescData = protoimpl.X.CompressGZIP(file_performance_proto_rawDescData)
	})
	return file_performance_proto_rawDescData
}

var file_performance_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_performance_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_performance_proto_goTypes = []any{
	(ReviewPeriod)(0),                             // 0: hr.performance.v1.ReviewPeriod
	(ReviewStatus)(0),                             // 1: hr.performance.v1.ReviewStatus
	(GoalStatus)(0),                               // 2: hr.performance.v1.GoalStatus
	(*PerformanceReview)(nil),                     // 3: hr.performance.v1.PerformanceReview
	(*Goal)(nil),                                  // 4: hr.performance.v1.Goal
	(*Competency)(nil),                            // 5: hr.performance.v1.Competency
	(*CreatePerformanceReviewRequest)(nil),        // 6: hr.performance.v1.CreatePerformanceReviewRequest
	(*CreatePerformanceReviewResponse)(nil),       // 7: hr.performance.v1.CreatePerformanceReviewResponse
	(*GetPerformanceReviewRequest)(nil),           // 8: hr.performance.v1.GetPerformanceReviewRequest
	(*GetPerformanceReviewResponse)(nil),          // 9: hr.performance.v1.GetPerformanceReviewResponse
	(*UpdatePerformanceReviewRequest)(nil),        // 10: hr.performance.v1.UpdatePerformanceReviewRequest
	(*UpdatePerformanceReviewResponse)(nil),       // 11: hr.performance.v1.UpdatePerformanceReviewResponse
	(*DeletePerformanceReviewRequest)(nil),        // 12: hr.performance.v1.DeletePerformanceReviewRequest
	(*ListPerformanceReviewsRequest)(nil),         // 13: hr.performance.v1.ListPerformanceReviewsRequest
	(*ListPerformanceReviewsResponse)(nil),        // 14: hr.performance.v1.ListPerformanceReviewsResponse
	(*SubmitPerformanceReviewRequest)(nil),        // 15: hr.performance.v1.SubmitPerformanceReviewRequest
	(*SubmitPerformanceReviewResponse)(nil),       // 16: hr.performance.v1.SubmitPerformanceReviewResponse
	(*GetEmployeePerformanceHistoryRequest)(nil),  // 17: hr.performance.v1.GetEmployeePerformanceHistoryRequest
	(*GetEmployeePerformanceHistoryResponse)(nil), // 18: hr.performance.v1.GetEmployeePerformanceHistoryResponse
	(*timestamppb.Timestamp)(nil),                 // 19: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                         // 20: google.protobuf.Empty
}
var file_performance_proto_depIdxs = []int32{
	0,  // 0: hr.performance.v1.PerformanceReview.review_period:type_name -> hr.performance.v1.ReviewPeriod
	1,  // 1: hr.performance.v1.PerformanceReview.status:type_name -> hr.performance.v1.ReviewStatus
	4,  // 2: hr.performance.v1.PerformanceReview.goals:type_name -> hr.performance.v1.Goal
	5,  // 3: hr.performance.v1.PerformanceReview.competencies:type_name -> hr.performance.v1.Competency
	19, // 4: hr.performance.v1.PerformanceReview.review_date:type_name -> google.protobuf.Timestamp
	19, // 5: hr.performance.v1.PerformanceReview.submitted_at:type_name -> google.protobuf.Timestamp
	19, // 6: hr.performance.v1.PerformanceReview.created_at:type_name -> google.protobuf.Timestamp
	19, // 7: hr.performance.v1.PerformanceReview.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 8: hr.performance.v1.Goal.status:type_name -> hr.performance.v1.GoalStatus
	0,  // 9: hr.performance.v1.CreatePerformanceReviewRequest.review_period:type_name -> hr.performance.v1.ReviewPeriod
	19, // 10: hr.performance.v1.CreatePerformanceReviewRequest.review_date:type_name -> google.protobuf.Timestamp
	4,  // 11: hr.performance.v1.CreatePerformanceReviewRequest.goals:type_name -> hr.performance.v1.Goal
	5,  // 12: hr.performance.v1.CreatePerformanceReviewRequest.competencies:type_name -> hr.performance.v1.Competency
	3,  // 13: hr.performance.v1.CreatePerformanceReviewResponse.performance_review:type_name -> hr.performance.v1.PerformanceReview
	3,  // 14: hr.performance.v1.GetPerformanceReviewResponse.performance_review:type_name -> hr.performance.v1.PerformanceReview
	4,  // 15: hr.performance.v1.UpdatePerformanceReviewRequest.goals:type_name -> hr.performance.v1.Goal
	5,  // 16: hr.performance.v1.UpdatePerformanceReviewRequest.competencies:type_name -> hr.performance.v1.Competency
	3,  // 17: hr.performance.v1.UpdatePerformanceReviewResponse.performance_review:type_name -> hr.performance.v1.PerformanceReview
	1,  // 18: hr.performance.v1.ListPerformanceReviewsRequest.status:type_name -> hr.performance.v1.ReviewStatus
	0,  // 19: hr.performance.v1.ListPerformanceReviewsRequest.review_period:type_name -> hr.performance.v1.ReviewPeriod
	3,  // 20: hr.performance.v1.ListPerformanceReviewsResponse.performance_reviews:type_name -> hr.performance.v1.PerformanceReview
	3,  // 21: hr.performance.v1.SubmitPerformanceReviewResponse.performance_review:type_name -> hr.performance.v1.PerformanceReview
	3,  // 22: hr.performance.v1.GetEmployeePerformanceHistoryResponse.performance_reviews:type_name -> hr.performance.v1.PerformanceReview
	12, // 23: hr.performance.v1.PerformanceService.DeletePerformanceReview:input_type -> hr.performance.v1.DeletePerformanceReviewRequest
	8,  // 24: hr.performance.v1.PerformanceService.GetPerformanceReview:input_type -> hr.performance.v1.GetPerformanceReviewRequest
	13, // 25: hr.performance.v1.PerformanceService.ListPerformanceReviews:input_type -> hr.performance.v1.ListPerformanceReviewsRequest
	10, // 26: hr.performance.v1.PerformanceService.UpdatePerformanceReview:input_type -> hr.performance.v1.UpdatePerformanceReviewRequest
	15, // 27: hr.performance.v1.PerformanceService.SubmitPerformanceReview:input_type -> hr.performance.v1.SubmitPerformanceReviewRequest
	6,  // 28: hr.performance.v1.PerformanceService.CreatePerformanceReview:input_type -> hr.performance.v1.CreatePerformanceReviewRequest
	17, // 29: hr.performance.v1.PerformanceService.GetEmployeePerformanceHistory:input_type -> hr.performance.v1.GetEmployeePerformanceHistoryRequest
	20, // 30: hr.performance.v1.PerformanceService.DeletePerformanceReview:output_type -> google.protobuf.Empty
	9,  // 31: hr.performance.v1.PerformanceService.GetPerformanceReview:output_type -> hr.performance.v1.GetPerformanceReviewResponse
	14, // 32: hr.performance.v1.PerformanceService.ListPerformanceReviews:output_type -> hr.performance.v1.ListPerformanceReviewsResponse
	11, // 33: hr.performance.v1.PerformanceService.UpdatePerformanceReview:output_type -> hr.performance.v1.UpdatePerformanceReviewResponse
	16, // 34: hr.performance.v1.PerformanceService.SubmitPerformanceReview:output_type -> hr.performance.v1.SubmitPerformanceReviewResponse
	7,  // 35: hr.performance.v1.PerformanceService.CreatePerformanceReview:output_type -> hr.performance.v1.CreatePerformanceReviewResponse
	18, // 36: hr.performance.v1.PerformanceService.GetEmployeePerformanceHistory:output_type -> hr.performance.v1.GetEmployeePerformanceHistoryResponse
	30, // [30:37] is the sub-list for method output_type
	23, // [23:30] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_performance_proto_init() }
func file_performance_proto_init() {
	if File_performance_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_performance_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_performance_proto_goTypes,
		DependencyIndexes: file_performance_proto_depIdxs,
		EnumInfos:         file_performance_proto_enumTypes,
		MessageInfos:      file_performance_proto_msgTypes,
	}.Build()
	File_performance_proto = out.File
	file_performance_proto_rawDesc = nil
	file_performance_proto_goTypes = nil
	file_performance_proto_depIdxs = nil
}
